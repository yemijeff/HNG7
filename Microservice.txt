# HNG7
 What is Microservice:
Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:
1. Highly maintainable and testable
2. Loosely coupled
3. Independently deployable
4. Organized around business capabilities
5. Owned by a small team
6. The microservice architecture enables the rapid, frequent and reliable delivery of large, complex applications. It also enables an organization to evolve its technology stack.

Why Microservices
A microservices architecture takes this same approach and extends it to the loosely coupled services which can be developed, deployed, and maintained independently. Each of these services is responsible for discrete task and can communicate with other services through simple APIs to solve a larger complex business problem.
How to build microservices

Step 1: Start with a monolith
The first best practice of microservices is that you probably donâ€™t need them. If you don't have any users for your application chances are that the business requirements are going to rapidly change while you're building your MVP. This is simply due to the nature of software development and the feedback cycle that needs to happen while you're identifying the key business capabilities that your system needs to provide. Microservices do add exponential overhead and complexity to manage. For this reason it is much less overhead for new projects to keep all the code and logic within a single codebase as it's makes it easier to move the boundaries of the different modules of your application.

Step 2: Organise your teams the right way
Up until now it would have seemed that building microservices is mostly a technical affair. You'll need to split a codebase in multiple services, implement the right patterns to fail gracefully and recover from network issues, deal with data consistency, monitor service load, etc. There will be a bunch of new concepts to grasp but one thing that must not be ignored is that you'll need to restructure the way your teams are organized.

Step 3: Split the monolith to build a microservices architecture
When you've identified the boundaries of your services and when you've figured out how you can change your teams to be more vertical in terms of competencies you can start splitting your monolith to build microservices. Here are the key points to think about at that time.

Advantages of microservices:
1. Development flexibility 
2. Technology flexibility 
3. Can be scaled separately 
Disadvantages of microservices:
1. Development / architecture complexity 
2. Service discovery
